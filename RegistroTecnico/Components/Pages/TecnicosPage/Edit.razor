@page "/Tecnicos/Edit/{TecnicoId:int}"
@inject Tecnicoservice tecnicoservice
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="card shadow-lg border-0 rounded" style="background-color: #f8f9fa;">
    <div class="card-header bg-primary text-white" style="text-align: center;">
        <h3><i class="fas fa-clipboard-list"></i> Editar Técnico</h3>
    </div>

    <div class="card-body">
        <div class="mb-3">
            <label for="TecnicoId" class="form-label">ID del Técnico:</label>
            <InputNumber @bind-Value="tecnicos.TecniCold" class="form-control" Disabled />
        </div>

        <div class="mb-3">
            <label for="SueldoHora" class="form-label">Sueldo por hora:</label>
            <InputNumber @bind-Value="tecnicos.SueldoHora" class="form-control" />
        </div>

        <div class="mb-3">
            <label for="Nombre" class="form-label">Nombre:</label>
            <InputText @bind-Value="tecnicos.Nombre" class="form-control" />
        </div>
    </div>

    <div class="card-footer bg-light d-flex justify-content-center mt-3">
        <div class="btn-group">
            <button type="button" class="btn btn-outline-primary ml-2" @onclick="Nuevo"><span class="bi bi-plus"></span> Nuevo</button>
            <button type="button" class="btn btn-outline-success ml-2" @onclick="Guardar"><span class="bi bi-check-circle-fill"></span> Guardar</button>
            <button type="button" class="btn btn-outline-danger ml-2" @onclick="Eliminar"><span class="bi bi-trash-fill"></span> Eliminar</button>
            <a href="/Tecnicos/Index" class="btn btn-outline-secondary"><span class="bi bi-arrow-bar-left"></span> Volver</a>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? TecnicoId { get; set; }
    public Tecnicos tecnicos { get; set; } = new Tecnicos();
    private bool Existe = false;

    protected override async Task OnInitializedAsync()
    {
        if (TecnicoId.HasValue)
        {
            tecnicos.TecniCold = TecnicoId.Value;
            await Buscar();
        }
    }

    public void Nuevo()
    {
        tecnicos = new Tecnicos();
        Existe = false;
    }

    public async Task Buscar()
    {
        var tecnicoEncontrado = await tecnicoservice.Buscar(tecnicos.TecniCold);
        if (tecnicoEncontrado != null)
        {
            tecnicos = tecnicoEncontrado;
        }
    }

    public async Task Guardar()
    {
        if (await Validar())
        {
            var guardo = await tecnicoservice.Modificar(tecnicos);
            if (guardo)
            {
                NavigationManager.NavigateTo("/Tecnicos/Index");
            }
        }
    }

    public async Task<bool> Validar()
    {
        Existe = await tecnicoservice.Existe(tecnicos.Nombre);
        return !Existe;
    }

    public async Task Eliminar()
    {
        var eliminado = await tecnicoservice.ELiminar(tecnicos.TecniCold);
        Nuevo();
    }
}

